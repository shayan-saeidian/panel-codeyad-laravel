<?php

namespace App\Models;

// use Illuminate\Contracts\Auth\MustVerifyEmail;
use App\Enum\UserStatus;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;

class User extends Authenticatable
{
    /** @use HasFactory<\Database\Factories\UserFactory> */
    use HasFactory, Notifiable, SoftDeletes;

    /**
     * The attributes that are mass assignable.
     *
     * @var list<string>
     */
    protected $fillable = [
        'name',
        'family',
        'mobile',
        'email',
        'password',
        'status',
        'image',
    ];


    /**
     * The attributes that should be hidden for serialization.
     *
     * @var list<string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * Get the attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'email_verified_at' => 'datetime',
            'password' => 'hashed',
            'status' => UserStatus::class,
        ];
    }
    public function scopeUserStatus($query,$status)
    {
        return $query->where('status',$status);
    }

//    protected static function boot()
//    {
//        parent::boot(); // TODO: Change the autogenerated stub
//        self::addGlobalScope('status',function (Builder $builder) {
//            $builder->where('status',UserStatus::Active->value)->
//            where('email_verified_at', '!=', null);
//        });
//    }

//    public function getStatusAttribute($value)
//    {
//        switch($value){
//            case UserStatus::Active->value:
//                return 'فعال';
//            break;
//            case UserStatus::Inactive->value:
//                return 'غیر فعال';
//            break;
//            default:
//                return' هیچ کدام';
//        }
//    }
    public function getUserStatusAttribute()
    {
        switch($this->status){
            case UserStatus::Active->value:
                return 'فعال';
                break;
            case UserStatus::Inactive->value:
                return 'غیر فعال';
                break;
            default:
                return ' هیچ کدام';
        }
    }

    public function getFullNameAttribute()
    {
        return $this->name.' '.$this->family;
    }
    public function setEmailAttribute($value)
    {
        $this->attributes['email']=strtolower($value);
    }
    public function user_info()
    {
        return $this->hasOne(UserInfo::class);
    }
    public function posts()
    {
        return $this->hasMany(Post::class);
    }
    public function roles()
    {
        return $this->belongsToMany(Role::class, 'role_user')->withPivot('status');
    }

    public function image_show()
    {
        return $this->morphOne(Image::class, 'imageable');
    }


}
